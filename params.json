{"name":"Speedy for iOS","tagline":"","body":"# Welcome to Speedy!\r\nSpeedy is a math-based brain game that involves essentially doing arithmetic in reverse. Instead of evaluating a mathematical expression and finding a number, you are given the number and have to build an expression that evaluates to it.\r\n\r\nThen on top of that, there are more exciting gameplay features, such as time pressure and a competitive multiplayer mode.\r\n\r\n## The Origins of Speedy\r\nI’ve been a fan of math games for a long time. I used to play a lot of sudoku, and more recently, 2048, and I had been looking for something new to play. I wanted a game that was quick to play, so I could play it in the idle time between my other activities, but something that made me think and warmed up my brain in the morning. I also wanted something with an easy learning curve, so that anyone can pick it up and start playing within a minute.\r\n\r\nThen one day a couple years ago, I came up with the basic idea of swiping numbers around with operators to create a target number. I drew up the first version of the speedy game interface on an index card, and didn’t really develop it any further for about two years. Then when my partners and I were brainstorming app ideas at the beginning of the quarter, I brought up this idea that I had had. After more thought, we all agreed that there was the potential for a fun and smart game that could be really addictive too, and the idea for Speedy was born.\r\n\r\n## About Speedy\r\n\r\nSpeedy was developed in 10 weeks for UCSD's CSE 190: Mobile Programming class. The original idea was conceived and pitched by Tyler Levine, and it was developed (and is still being developed) by Krishna Kolli, John Chou, Edward Chiou, Kevin Liu, and Tyler Levine. This website was created and is maintained by Tyler Levine.\r\n\r\nSpeedy was built for devices running iOS 8 or later. Some of the technologies used in its implementation are:\r\n* Swift\r\n* SpriteKit\r\n* Node.js\r\n* MongoDB\r\n\r\nThe Speedy server side component runs on Heroku, and is built with Node.js, while the client side is built in Swift using the XCode interface builder and the SpriteKit graphics and physics library.\r\n\r\nSpeedy is not yet on the iOS app store, but we are working hard to get it there soon so you can play Speedy too! If you're up to it, feel free to download the code and build it yourself to try it out.\r\n\r\n## Links\r\n[The main Speedy git repository](https://github.com/kkolli/MathGame)\r\n\r\n[The Swift Programming Language](https://developer.apple.com/swift/)\r\n\r\n[The SpriteKit graphics and physics library for iOS](https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html)\r\n\r\n[Node.js](https://nodejs.org/)\r\n\r\n[MongoDB](http://www.mongodb.org/)\r\n\r\n[Heroku](https://www.heroku.com/)\r\n\r\n-----\r\n# The Development of Speedy\r\n\r\n### Initial Game Design (WhiteBoard)\r\n![Game flow](/images/speedy_gameplay.jpg)\r\n\r\n### First Look at Our Game with Code!\r\n![Game Play V1](/images/gameplay_1.jpg)\r\n\r\n### After Some Work With UI and Game Scene Physics...\r\n![Game Play V2](/images/gameplay_2.jpg)\r\n\r\n### Our Finished Version\r\n![Game Play V3](/images/finalgameplay.jpg)\r\n\r\n-----\r\n\r\n# The Flow of the App\r\n### Initial UI Flow (WhiteBoard)\r\n![Ui flow](/images/speedy_uiflow.jpg)\r\n\r\n### Our First Settings Page\r\n![Intro Screen](/images/settingspage.jpg)\r\n\r\n### Our Initial Summary Page\r\n![Summary Page](/images/initial_summarypage.jpg)\r\n\r\n### First Look at Our Game with Code!\r\n![Intro Screen](/images/introscreen.jpg)\r\n\r\n\r\n### Our Final Results Page\r\n![Game Play V3](/images/finalsummary.jpg)\r\n\r\n### Our Instruction Page\r\n![Game Play V3](/images/finalinstructions.jpg)\r\n\r\n### Our Final Intro Page\r\n![Game Play V3](/images/finalintroview.jpg)\r\n\r\n### Our Final High Scores Page\r\n![Game Play V3](/images/finalhighscores.jpg)\r\n","google":"UA-60408003-1","note":"Don't delete this file! It's used internally to help with page regeneration."}